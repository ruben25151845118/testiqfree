import React, { useState, useEffect } from 'react';
import { Brain, Clock, CheckCircle, XCircle, RotateCcw } from 'lucide-react';

// Componente de Einstein animado
const AnimatedEinstein = ({ mood = "thinking", size = "large" }) => {
  const [isBlinking, setIsBlinking] = useState(false);
  const [headTilt, setHeadTilt] = useState(0);

  useEffect(() => {
    // Animación de parpadeo
    const blinkInterval = setInterval(() => {
      setIsBlinking(true);
      setTimeout(() => setIsBlinking(false), 150);
    }, 3000 + Math.random() * 2000);

    // Animación sutil de cabeza
    const headInterval = setInterval(() => {
      setHeadTilt(Math.random() * 6 - 3);
    }, 4000);

    return () => {
      clearInterval(blinkInterval);
      clearInterval(headInterval);
    };
  }, []);

  const dimensions = size === "large" ? "w-32 h-32" : size === "medium" ? "w-20 h-20" : "w-12 h-12";
  
  const getEyeHeight = () => isBlinking ? "2" : "8";
  const getExpression = () => {
    switch(mood) {
      case "happy": return "M 35 75 Q 50 85 65 75";
      case "surprised": return "M 40 75 Q 50 70 60 75";
      case "thinking": return "M 40 75 Q 50 78 60 75";
      default: return "M 40 75 Q 50 78 60 75";
    }
  };

  return (
    <div className={`${dimensions} mx-auto`}>
      <svg viewBox="0 0 100 100" className="w-full h-full">
        <defs>
          <radialGradient id="faceGradient" cx="50%" cy="40%" r="60%">
            <stop offset="0%" stopColor="#fde68a" />
            <stop offset="100%" stopColor="#f59e0b" />
          </radialGradient>
          <filter id="glow">
            <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
            <feMerge> 
              <feMergeNode in="coloredBlur"/>
              <feMergeNode in="SourceGraphic"/>
            </feMerge>
          </filter>
        </defs>
        
        {/* Cabello desaliñado */}
        <g transform={`rotate(${headTilt} 50 50)`}>
          <path d="M 20 35 Q 15 25 25 20 Q 35 15 45 18 Q 55 15 65 18 Q 75 15 85 25 Q 80 35 75 30 Q 70 25 65 28 Q 60 25 55 28 Q 50 25 45 28 Q 40 25 35 28 Q 30 25 25 30 Z" 
                fill="#9ca3af" stroke="#6b7280" strokeWidth="1"/>
          
          {/* Cara */}
          <ellipse cx="50" cy="55" rx="25" ry="30" fill="url(#faceGradient)" stroke="#d97706" strokeWidth="1"/>
          
          {/* Cejas expresivas */}
          <path d="M 35 45 Q 40 42 45 45" stroke="#6b7280" strokeWidth="2" fill="none" strokeLinecap="round"/>
          <path d="M 55 45 Q 60 42 65 45" stroke="#6b7280" strokeWidth="2" fill="none" strokeLinecap="round"/>
          
          {/* Ojos */}
          <ellipse cx="42" cy="50" rx="4" ry={getEyeHeight()} fill="#1f2937"/>
          <ellipse cx="58" cy="50" rx="4" ry={getEyeHeight()} fill="#1f2937"/>
          {!isBlinking && (
            <>
              <circle cx="42" cy="48" r="1.5" fill="white"/>
              <circle cx="58" cy="48" r="1.5" fill="white"/>
            </>
          )}
          
          {/* Nariz */}
          <ellipse cx="50" cy="58" rx="2" ry="4" fill="#d97706"/>
          
          {/* Bigote */}
          <path d="M 40 65 Q 50 70 60 65" stroke="#6b7280" strokeWidth="3" fill="none" strokeLinecap="round"/>
          
          {/* Boca */}
          <path d={getExpression()} stroke="#7c2d12" strokeWidth="2" fill="none" strokeLinecap="round"/>
        </g>

        {/* Partículas de pensamiento */}
        {mood === "thinking" && (
          <g>
            <circle cx="75" cy="25" r="1" fill="#3b82f6" opacity="0.7">
              <animate attributeName="cy" values="25;20;25" dur="2s" repeatCount="indefinite"/>
            </circle>
            <circle cx="80" cy="30" r="0.8" fill="#6366f1" opacity="0.5">
              <animate attributeName="cy" values="30;25;30" dur="2.5s" repeatCount="indefinite"/>
            </circle>
            <circle cx="85" cy="28" r="0.6" fill="#8b5cf6" opacity="0.6">
              <animate attributeName="cy" values="28;23;28" dur="3s" repeatCount="indefinite"/>
            </circle>
          </g>
        )}

        {/* Efecto de genialidad */}
        {mood === "happy" && (
          <g>
            <path d="M 45 20 L 47 25 L 52 23 L 48 28 L 53 30 L 47 32 L 50 37 L 45 33 L 43 38 L 42 32 L 37 35 L 40 30 L 35 28 L 40 25 L 38 20 L 43 23 Z" 
                  fill="#fbbf24" opacity="0.8" filter="url(#glow)">
              <animateTransform attributeName="transform" attributeType="XML" 
                              type="rotate" values="0 45 28; 360 45 28" dur="4s" repeatCount="indefinite"/>
            </path>
          </g>
        )}
      </svg>
    </div>
  );
};

const IQTest = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState({});
  const [timeLeft, setTimeLeft] = useState(1200);
  const [isFinished, setIsFinished] = useState(false);
  const [startTime] = useState(Date.now());

  const questions = [
    {
      id: 1,
      type: "Secuencias Numéricas",
      question: "¿Cuál es el siguiente número en la secuencia: 2, 6, 12, 20, 30, ?",
      options: ["40", "42", "44", "46"],
      correct: 1,
      points: 6
    },
    {
      id: 2,
      type: "Razonamiento Lógico",
      question: "Si todos los gatos son mamíferos y algunos mamíferos vuelan, entonces:",
      options: ["Todos los gatos vuelan", "Algunos gatos podrían volar", "Ningún gato vuela", "No se puede determinar"],
      correct: 3,
      points: 8
    },
    {
      id: 3,
      type: "Analogías Verbales",
      question: "LIBRO es a BIBLIOTECA como CUADRO es a:",
      options: ["Marco", "Pintura", "Museo", "Arte"],
      correct: 2,
      points: 6
    },
    {
      id: 4,
      type: "Matemáticas",
      question: "Si x + 5 = 12, entonces 3x - 4 = ?",
      options: ["17", "19", "21", "23"],
      correct: 0,
      points: 7
    },
    {
      id: 5,
      type: "Patrones Visuales",
      question: "En una secuencia donde cada figura tiene un elemento más que la anterior, si la tercera figura tiene 7 elementos, ¿cuántos tiene la sexta?",
      options: ["10", "11", "12", "13"],
      correct: 0,
      points: 8
    },
    {
      id: 6,
      type: "Comprensión Verbal",
      question: "¿Cuál de estas palabras NO pertenece al grupo?",
      options: ["Violín", "Piano", "Guitarra", "Trompeta"],
      correct: 1,
      points: 6
    },
    {
      id: 7,
      type: "Razonamiento Espacial",
      question: "Si roto un cubo 90° hacia la derecha y luego 180° hacia atrás, ¿cuál será la posición final comparada con la inicial?",
      options: ["90° derecha", "180° atrás", "270° derecha", "90° derecha + 180° atrás"],
      correct: 3,
      points: 9
    },
    {
      id: 8,
      type: "Secuencias Lógicas",
      question: "Completa la serie: AZ, BY, CX, DW, ?",
      options: ["EV", "EW", "FV", "FU"],
      correct: 0,
      points: 7
    },
    {
      id: 9,
      type: "Problemas Lógicos",
      question: "En una carrera, si adelantas al segundo lugar, ¿en qué posición quedas?",
      options: ["Primero", "Segundo", "Tercero", "Depende"],
      correct: 1,
      points: 5
    },
    {
      id: 10,
      type: "Matemáticas Avanzadas",
      question: "¿Cuál es el valor de 2³ + 3² - √16?",
      options: ["13", "15", "17", "19"],
      correct: 2,
      points: 8
    },
    {
      id: 11,
      type: "Razonamiento Deductivo",
      question: "Si llueve, entonces las calles se mojan. Las calles están secas. Por lo tanto:",
      options: ["Está lloviendo", "No está lloviendo", "Podría estar lloviendo", "No hay información suficiente"],
      correct: 1,
      points: 9
    },
    {
      id: 12,
      type: "Patrones Numéricos",
      question: "¿Qué número falta? 3, 8, 15, 24, ?, 48",
      options: ["32", "35", "36", "40"],
      correct: 1,
      points: 7
    },
    {
      id: 13,
      type: "Comprensión Conceptual",
      question: "¿Cuál es la relación entre CAUSA y EFECTO?",
      options: ["Opuestos", "Sinónimos", "Secuencia temporal", "Sin relación"],
      correct: 2,
      points: 6
    },
    {
      id: 14,
      type: "Lógica Matemática",
      question: "Si 5 máquinas hacen 5 productos en 5 minutos, ¿cuánto tiempo tardan 100 máquinas en hacer 100 productos?",
      options: ["5 minutos", "10 minutos", "100 minutos", "500 minutos"],
      correct: 0,
      points: 10
    },
    {
      id: 15,
      type: "Razonamiento Abstracto",
      question: "En una secuencia donde cada término es el doble del anterior más 1, si el tercer término es 15, ¿cuál es el primero?",
      options: ["3", "4", "5", "6"],
      correct: 0,
      points: 9
    },
    {
      id: 16,
      type: "Síntesis Lógica",
      question: "Si A es mayor que B, B es mayor que C, y C es mayor que D, ¿cuál de estas afirmaciones es necesariamente verdadera?",
      options: ["A es mayor que D", "D es menor que B", "C es menor que A", "Todas las anteriores"],
      correct: 3,
      points: 10
    }
  ];

  useEffect(() => {
    if (timeLeft > 0 && !isFinished) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (timeLeft === 0) {
      finishTest();
    }
  }, [timeLeft, isFinished]);

  const handleAnswer = (answerIndex) => {
    const newAnswers = { ...answers, [currentQuestion]: answerIndex };
    setAnswers(newAnswers);
  };

  const nextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      finishTest();
    }
  };

  const prevQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const finishTest = () => {
    setIsFinished(true);
  };

  const calculateResults = () => {
    let totalPoints = 0;
    let correctAnswers = 0;
    let categoryScores = {};

    questions.forEach((question, index) => {
      const userAnswer = answers[index];
      const category = question.type;
      
      if (!categoryScores[category]) {
        categoryScores[category] = { total: 0, earned: 0 };
      }
      
      categoryScores[category].total += question.points;
      
      if (userAnswer === question.correct) {
        totalPoints += question.points;
        correctAnswers++;
        categoryScores[category].earned += question.points;
      }
    });

    const maxPoints = questions.reduce((sum, q) => sum + q.points, 0);
    const percentage = (totalPoints / maxPoints) * 100;
    
    let iqScore;
    if (percentage >= 95) iqScore = 140;
    else if (percentage >= 90) iqScore = 130;
    else if (percentage >= 85) iqScore = 125;
    else if (percentage >= 80) iqScore = 120;
    else if (percentage >= 75) iqScore = 115;
    else if (percentage >= 65) iqScore = 110;
    else if (percentage >= 55) iqScore = 105;
    else if (percentage >= 45) iqScore = 100;
    else if (percentage >= 35) iqScore = 95;
    else if (percentage >= 25) iqScore = 90;
    else if (percentage >= 15) iqScore = 85;
    else iqScore = 80;

    const timeTaken = Math.floor((Date.now() - startTime) / 1000);

    return {
      iqScore,
      totalPoints,
      maxPoints,
      correctAnswers,
      percentage: percentage.toFixed(1),
      timeTaken,
      categoryScores
    };
  };

  const resetTest = () => {
    setCurrentQuestion(0);
    setAnswers({});
    setTimeLeft(1200);
    setIsFinished(false);
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getIQCategory = (score) => {
    if (score >= 140) return { category: "Genio", color: "text-purple-600" };
    if (score >= 130) return { category: "Muy Superior", color: "text-blue-600" };
    if (score >= 120) return { category: "Superior", color: "text-green-600" };
    if (score >= 110) return { category: "Promedio Alto", color: "text-teal-600" };
    if (score >= 90) return { category: "Promedio", color: "text-gray-600" };
    if (score >= 80) return { category: "Promedio Bajo", color: "text-orange-600" };
    return { category: "Bajo Promedio", color: "text-red-600" };
  };

  if (isFinished) {
    const results = calculateResults();
    const iqCategory = getIQCategory(results.iqScore);

    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-2xl shadow-2xl p-8">
            <div className="text-center mb-8">
              <AnimatedEinstein mood="happy" size="large" />
              <h1 className="text-4xl font-bold text-gray-800 mb-2 mt-4">Resultados del Test de IQ</h1>
              <div className="w-32 h-1 bg-indigo-600 mx-auto"></div>
              <p className="text-gray-600 mt-2 italic">"La imaginación es más importante que el conocimiento" - Einstein</p>
            </div>

            <div className="grid md:grid-cols-2 gap-8">
              <div className="text-center">
                <div className="bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl p-6 text-white mb-6">
                  <h2 className="text-2xl font-semibold mb-2">Tu Puntuación de IQ</h2>
                  <div className="text-6xl font-bold">{results.iqScore}</div>
                  <div className={`text-xl font-semibold mt-2 ${iqCategory.color} bg-white bg-opacity-20 rounded-lg py-2 px-4`}>
                    {iqCategory.category}
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="text-sm text-gray-600">Respuestas Correctas</div>
                    <div className="text-2xl font-bold text-green-600">
                      {results.correctAnswers}/16 ({results.percentage}%)
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="text-sm text-gray-600">Tiempo Utilizado</div>
                    <div className="text-xl font-semibold text-blue-600">
                      {formatTime(results.timeTaken)}
                    </div>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-xl font-bold text-gray-800 mb-4">Análisis por Habilidades</h3>
                <div className="space-y-3">
                  {Object.entries(results.categoryScores).map(([category, scores]) => {
                    const percentage = (scores.earned / scores.total) * 100;
                    return (
                      <div key={category} className="bg-gray-50 rounded-lg p-4">
                        <div className="flex justify-between items-center mb-2">
                          <span className="font-medium text-gray-700 text-sm">{category}</span>
                          <span className="text-sm font-semibold">{scores.earned}/{scores.total}</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div 
                            className="bg-gradient-to-r from-blue-500 to-indigo-600 h-2 rounded-full"
                            style={{ width: `${percentage}%` }}
                          ></div>
                        </div>
                        <div className="text-xs text-gray-600 mt-1">{percentage.toFixed(0)}%</div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>

            <div className="mt-8 bg-blue-50 rounded-lg p-6 relative">
              <div className="absolute top-4 right-4">
                <AnimatedEinstein mood="happy" size="small" />
              </div>
              <h3 className="text-lg font-bold text-blue-800 mb-3">Interpretación de Resultados</h3>
              <div className="grid md:grid-cols-2 gap-4 text-sm text-blue-700 pr-16">
                <div>
                  <strong>Escala de IQ:</strong>
                  <ul className="mt-2 space-y-1">
                    <li>• 140+: Genio</li>
                    <li>• 130-139: Muy Superior</li>
                    <li>• 120-129: Superior</li>
                    <li>• 110-119: Promedio Alto</li>
                  </ul>
                </div>
                <div>
                  <strong>Distribución:</strong>
                  <ul className="mt-2 space-y-1">
                    <li>• 90-109: Promedio</li>
                    <li>• 80-89: Promedio Bajo</li>
                    <li>• 70-79: Bajo Promedio</li>
                    <li>• &lt;70: Límite</li>
                  </ul>
                </div>
              </div>
              <div className="mt-4 text-center">
                <p className="text-blue-600 italic text-sm">
                  "El genio es 1% inspiración y 99% transpiración" - Einstein
                </p>
              </div>
            </div>

            <div className="text-center mt-8">
              <button
                onClick={resetTest}
                className="inline-flex items-center px-6 py-3 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition-colors"
              >
                <RotateCcw className="w-5 h-5 mr-2" />
                Reiniciar Test
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const currentQ = questions[currentQuestion];
  const progress = ((currentQuestion + 1) / questions.length) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-3xl mx-auto">
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <div className="flex justify-between items-center mb-8">
            <div className="flex items-center">
              <AnimatedEinstein mood="thinking" size="small" />
              <div className="ml-4">
                <h1 className="text-2xl font-bold text-gray-800">Test de Inteligencia</h1>
                <p className="text-sm text-gray-600 italic">Con la sabiduría de Einstein</p>
              </div>
            </div>
            <div className="flex items-center text-orange-600">
              <Clock className="w-5 h-5 mr-2" />
              <span className="font-semibold">{formatTime(timeLeft)}</span>
            </div>
          </div>

          <div className="mb-8">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-medium text-gray-600">
                Pregunta {currentQuestion + 1} de {questions.length}
              </span>
              <span className="text-sm font-medium text-gray-600">{progress.toFixed(0)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-gradient-to-r from-blue-500 to-indigo-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${progress}%` }}
              ></div>
            </div>
          </div>

          <div className="mb-8">
            <div className="flex items-center justify-between mb-4">
              <div className="inline-block bg-indigo-100 text-indigo-800 text-xs font-semibold px-3 py-1 rounded-full">
                {currentQ.type}
              </div>
              <AnimatedEinstein mood="thinking" size="small" />
            </div>
            <h2 className="text-xl font-semibold text-gray-800 mb-6 leading-relaxed">
              {currentQ.question}
            </h2>

            <div className="space-y-3">
              {currentQ.options.map((option, index) => (
                <button
                  key={index}
                  onClick={() => handleAnswer(index)}
                  className={`w-full p-4 text-left rounded-lg border-2 transition-all duration-200 ${
                    answers[currentQuestion] === index
                      ? 'border-indigo-500 bg-indigo-50 text-indigo-800'
                      : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  <div className="flex items-center">
                    <span className="w-6 h-6 rounded-full border-2 border-current flex items-center justify-center mr-3 text-sm font-semibold">
                      {String.fromCharCode(65 + index)}
                    </span>
                    {option}
                  </div>
                </button>
              ))}
            </div>
          </div>

          <div className="flex justify-between items-center">
            <button
              onClick={prevQuestion}
              disabled={currentQuestion === 0}
              className="px-6 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Anterior
            </button>

            <div className="text-sm text-gray-600">
              {answers[currentQuestion] !== undefined ? (
                <span className="text-green-600 font-medium">Respondida</span>
              ) : (
                <span>Sin responder</span>
              )}
            </div>

            <button
              onClick={nextQuestion}
              disabled={answers[currentQuestion] === undefined}
              className="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {currentQuestion === questions.length - 1 ? 'Finalizar' : 'Siguiente'}
            </button>
          </div>

          <div className="mt-8 pt-6 border-t border-gray-200">
            <h3 className="text-sm font-semibold text-gray-600 mb-3">Progreso de respuestas:</h3>
            <div className="grid grid-cols-8 gap-2">
              {questions.map((_, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentQuestion(index)}
                  className={`w-8 h-8 rounded text-xs font-semibold transition-colors ${
                    answers[index] !== undefined
                      ? 'bg-green-500 text-white'
                      : index === currentQuestion
                      ? 'bg-indigo-500 text-white'
                      : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
                  }`}
                >
                  {index + 1}
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default IQTest;

